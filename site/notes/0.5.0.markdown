
This release represents the end of an era - 2.8.x support is officially removed.  0.5.0 will also be the last release for the Scalaz 6 releases.

Scales Xml 0.5.0 fixes two bugs:

1. [issue #23](https://github.com/chris-twiner/scalesXml/issues/23) - Replace should be allowed for root Elems in foldPositions
2. [issue #24](https://github.com/chris-twiner/scalesXml/issues/24) - string() does not include CDATA

and brings the following new features and improvements:

1. [issue #19](https://github.com/chris-twiner/scalesXml/issues/19) - Add empty and isNi functions
2. [issue #18](https://github.com/chris-twiner/scalesXml/issues/18) - Optional trees in DSL
3. [issue #16](https://github.com/chris-twiner/scalesXml/issues/16) - Smaller packages
4. [issue #15](https://github.com/chris-twiner/scalesXml/issues/15) - Async Xml Pull
5. [pull  #29](https://github.com/chris-twiner/scalesXml/pull/29)   - Allow QNames to be flexibly matched when iterating/onQName iterating (via the xI functions). 
6. [issue #30](https://github.com/chris-twiner/scalesXml/issues/30) - Reduced memory usage for attributes and increased performance for parsing them
7. [issue #31](https://github.com/chris-twiner/scalesXml/issues/31) - Xerces 2.9.1 support

A large thank you for contributions goes to a number of the Scales community, for build, [Travis-CI integration](https://travis-ci.org/chris-twiner/scalesXml), pull #29 and documentation help.

The new site can be found [here](http://scala-scales.googlecode.com/svn/sites/scales/scales-xml_2.10/0.5.0/index.html).

### Optional DSL

The Optional DSL documentation can be [found here](http://scala-scales.googlecode.com/svn/sites/scales/scales-xml_2.10/0.5.0/OptionalDsl.html).  The DSL provides the ability to collapse trees in the builder where no actual child text or attribute exists.

It works both for simple examples:

    val ns = Namespace("uri:test") 

    val root = ns("root")
    val optional = ns("optional")

    def someOptionalText: Option[String] = ???

    // optional is converted into an instance of OptionalDslBuilder allowing ?~> to be called
    val optionalxml = root /( optional ?~> someOptionalText )

and for more complex optional trees, combining fully with the existing DSL.  In the above example the root node will either be empty or contain an optional element with text.

### Smaller Packages

Based on both feedback from the Scala community at large and user experience Scales Xml has reached the size where its no longer useful to maintain the previous package layout.

Scales has been broken up into smaller functional units both within the utils and xml packages.  Deprecated functionality has, in addition, been moved to the Scales Extras repo.  While the key imports are still found in the main package and implicit objects optional functionality has been moved out into appropriate sub-packages, as have implementation details.

### Async Xml Parsing

Scales 0.5 adds support for Async parsing via the Aalto-xml pull parser.  Aalto adds the notion of an incomplete event, returning control to the calling code when more data is needed instead of blocking like traditional pull parsing.

Scales leverages this and enumeratees to provide yet more flexible pull parsing options.

### How To Use

Scales 0.5.0 is built against 2.9.3 and 2.10.  As such add:

    libraryDependencies ++= Seq(
      // just for the core library
      "org.scalesxml" %% "scales-xml" % "0.5.0"
      // and additionally use these for String based XPaths
      "org.scalesxml" %% "scales-jaxen" % "0.5.0" intransitive(),
      "jaxen" % "jaxen" % "1.1.3" intransitive()
      // to use Aalto based parsing
      "org.scalesxml" %% "scales-aalto" % "0.5.0"
    )

to your xsbt builds or use scales-xml_2.10.4 as the id when using Maven.
