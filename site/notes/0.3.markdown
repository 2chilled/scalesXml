
One breaking change - === to ==== for QName ......

\0.3 is a feature release, adding a the full set of useful XPath Axe, string based XPath evaluation - via a popular open source XPath library and many smaller improvements in syntax and usability.

This version has been built with xsbt 0.11.x and migrated to [github](https://github.com/chris-twiner/scalesXml).  The next major version will target Scalaz 7's new Iteratee framework, and likely provide optional IO based processing.

### All the Axe you'll ever need

Scales 0.3 adds the following axe:

* preceding-sibling (preceding\_sibling\_::)
* following-sibling (following\_sibling\_::)
* descendant (descendant\_::)
* following (following\_::)
* preceding (preceding\_::)
* ancestor (ancestor\_::)
* ancestor-or-self (ancestor\_or\_self\_::)
* descendant-or-self (descendant\_or\_self\_::)

This provides all of the XPath 1 and 2 axe (namespace excluded), for example:

<iframe src="http://urlspoiler.co/gists?id=1553843&file=Axe.scala" width="100%" height="117px">
</iframe>

### Enhanced internal XPath queries

* position() (pos)
        pos\_<, pos\_==, pos\_>
* last() (last)
        last\_<, last\_==, last\_>
* position() == last() (pos\_eq\_last)
* Easier to extend and re-use queries and axe
        xfilter, xmap, xflatMap

### String base XPath evaluation

* Evaluate normal XPath 1.0 strings but get back XmlPath's
* Evaluates to an Iterable[Either[AttributePath, XmlPath]] or,
+ get[T] a value directly from XPath 1.0 (e.g. get[String]\("normalize(//\*)")) 
+ Allows querying for the few predicates and XPaths that Scales cannot process (and dynamic queries of course)
+ Optional dependency

<iframe src="http://urlspoiler.co/gists?id=1553843&file=JaxenXPaths.scala" width="100%" height="400px">
</iframe>

### Extra Fun

* Forwards and Backwards Path Iterators (used by following and preceding)
* DuplicateFilter now works with the Scalaz Equal typeclass
* Using AttributeQNames with the tuple arrow now creates QNames as you'd expect 
* DslBuilder allows direct manipulation of trees via folding
* Simplify the Builder usage why /(<(Elem(... ) when you can just /(Elem)?
* Java 1.7 JAXP implementation checks - Schema validation is optimised (no serialization)

### Bug fixes

* Fixed stream handling in pull parsers
* iterate returning an Iterable